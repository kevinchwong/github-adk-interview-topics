name: Generate Software Interview Topics

permissions:
  contents: read
  issues: write

on:
  schedule:
    # Every Monday at 9:00 AM UTC (adjust timezone as needed)
    - cron: '0 9 * * MON'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      num_topics:
        description: 'Number of topics to generate'
        required: false
        default: '15'
        type: string
      difficulty_focus:
        description: 'Focus difficulty level'
        required: false
        default: 'mixed'
        type: choice
        options:
          - mixed
          - junior
          - mid-level
          - senior
          - staff

jobs:
  generate-interview-topics:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up Google Cloud credentials
      env:
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
      run: |
        if [ -z "$GOOGLE_APPLICATION_CREDENTIALS_JSON" ]; then
          echo "‚ùå GOOGLE_APPLICATION_CREDENTIALS_JSON secret is not set"
          exit 1
        fi
        echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > /tmp/gcp-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
    
    - name: Generate interview topics
      env:
        # Database configuration
        DATABASE_PROVIDER: 'FIREBASE'
        # Google Cloud configuration
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        GEMINI_MODEL: ${{ secrets.GEMINI_MODEL || 'gemini-1.5-flash' }}
        MAX_OUTPUT_TOKENS: ${{ secrets.MAX_OUTPUT_TOKENS || '8000' }}
        NUM_TOPICS: ${{ github.event.inputs.num_topics || '15' }}
        DIFFICULTY_FOCUS: ${{ github.event.inputs.difficulty_focus || 'mixed' }}
        RUN_ID: ${{ github.run_id }}
        REPO_GITHUB_SHA: ${{ github.sha }}
      run: |
        python src/main.py
    
    - name: Verify generation success
      if: success()
      env:
        DATABASE_PROVIDER: 'FIREBASE'
        # Google Cloud configuration
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        GEMINI_MODEL: ${{ secrets.GEMINI_MODEL || 'gemini-1.5-flash' }}
        MAX_OUTPUT_TOKENS: ${{ secrets.MAX_OUTPUT_TOKENS || '8000' }}
        NUM_TOPICS: ${{ github.event.inputs.num_topics || '15' }}
        DIFFICULTY_FOCUS: ${{ github.event.inputs.difficulty_focus || 'mixed' }}
        RUN_ID: ${{ github.run_id }}
        REPO_GITHUB_SHA: ${{ github.sha }}
      run: |
        python -c "
        import os
        import sys
        from datetime import datetime, timezone
        sys.path.insert(0, 'src')
        from database.database_factory import DatabaseFactory
        import asyncio
        
        async def verify():
            try:
                # Create database client
                db_client = DatabaseFactory.create_client()
                await db_client.connect()
                
                # Generate the same run ID format as main.py
                base_run_id = os.environ['RUN_ID']
                timestamp = datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S')
                run_id = f'github-{base_run_id}-{timestamp}'
                
                # Search for any recent documents (since exact timestamp matching is difficult)
                recent_docs = await db_client.get_recent_topics(limit=5)
                
                if recent_docs:
                    latest_doc = recent_docs[0]
                    topic_count = len(latest_doc.get('topics', []))
                    print(f'‚úÖ Found recent topics document with {topic_count} interview topics')
                    print(f'üìä Document Run ID: {latest_doc.get(\"runId\", \"unknown\")}')
                    print(f'üïí Generated at: {latest_doc.get(\"generatedAt\")}')
                else:
                    print('‚ùå No recent topics found')
                    sys.exit(1)
                
                await db_client.close()
                
            except Exception as e:
                print(f'‚ùå Verification failed: {e}')
                import traceback
                traceback.print_exc()
                sys.exit(1)
        
        asyncio.run(verify())
        "
    
    - name: Cleanup credentials
      if: always()
      run: |
        rm -f /tmp/gcp-key.json
    
    - name: Success notification
      uses: actions/github-script@v7
      with:
        script: |
          const runId = context.runId;
          
          console.log(`ü§ñ Interview Topics Generated Successfully`);
          console.log(`üìä Run ID: github-${runId}`);
          console.log(`üïí Generated at: ${new Date().toISOString()}`);
          console.log(`Check your Firebase Firestore for the new interview topics!`);

  # Optional: Notify on failure
  on-failure-notification:
    runs-on: ubuntu-latest
    needs: generate-interview-topics
    if: failure()
    permissions:
      issues: write
    
    steps:
    - name: Notify failure
      uses: actions/github-script@v7
      with:
        script: |
          const issue_body = `üö® **Interview Topics Generation Failed**
          
          The scheduled interview topics generation workflow failed.
          
          **Details:**
          - Run ID: ${context.runId}
          - Workflow: ${context.workflow}
          - Triggered by: ${context.eventName}
          - Timestamp: ${new Date().toISOString()}
          
          Please check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
          
          **Common fixes:**
          - Verify Google Cloud credentials and Firestore permissions
          - Ensure Vertex AI API is enabled
          - Check if quota limits were exceeded
          - Verify GOOGLE_CLOUD_PROJECT is set correctly
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Interview Topics Generation Failed - ${new Date().toISOString().split('T')[0]}`,
            body: issue_body,
            labels: ['bug', 'automation', 'urgent']
          });