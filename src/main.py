#!/usr/bin/env python3
"""
Software Interview Topics Generator
Main entry point for GitHub Actions workflow
"""

import os
import sys
import asyncio
import logging
from datetime import datetime, timezone
from typing import Dict, Any, List

# Add src to path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from agents.interview_agent import InterviewTopicsAgent
from database.mongodb_client import MongoDBClient

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
    ]
)
logger = logging.getLogger(__name__)


def validate_environment() -> Dict[str, str]:
    """Validate required environment variables"""
    required_vars = {
        'MONGODB_URI': 'MongoDB connection string',
        'GOOGLE_CLOUD_PROJECT': 'Google Cloud Project ID',
        'GOOGLE_APPLICATION_CREDENTIALS': 'Path to GCP service account key',
    }
    
    optional_vars = {
        'GEMINI_MODEL': 'gemini-pro',
        'NUM_TOPICS': '15',
        'DIFFICULTY_FOCUS': 'mixed',
        'RUN_ID': f'local-{datetime.now().strftime("%Y%m%d-%H%M%S")}',
        'GITHUB_SHA': 'local'
    }
    
    env_vars = {}
    missing_vars = []
    
    # Check required variables
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value:
            missing_vars.append(f"{var} ({description})")
        else:
            env_vars[var] = value
    
    if missing_vars:
        logger.error("Missing required environment variables:")
        for var in missing_vars:
            logger.error(f"  - {var}")
        raise ValueError("Required environment variables not set")
    
    # Set optional variables with defaults
    for var, default in optional_vars.items():
        env_vars[var] = os.getenv(var, default)
    
    return env_vars


def generate_run_id(base_run_id: str) -> str:
    """Generate unique run identifier"""
    timestamp = datetime.now(timezone.utc).strftime("%Y%m%d-%H%M%S")
    return f"github-{base_run_id}-{timestamp}"


async def main():
    """Main execution function"""
    try:
        logger.info("üöÄ Starting Software Interview Topics Generator")
        
        # Validate environment
        env_vars = validate_environment()
        logger.info("‚úÖ Environment validation passed")
        
        # Generate unique run ID
        run_id = generate_run_id(env_vars['RUN_ID'])
        logger.info(f"üìä Run ID: {run_id}")
        
        # Parse parameters
        num_topics = int(env_vars['NUM_TOPICS'])
        difficulty_focus = env_vars['DIFFICULTY_FOCUS']
        model = env_vars['GEMINI_MODEL']
        
        logger.info(f"üéØ Generating {num_topics} topics (difficulty: {difficulty_focus}, model: {model})")
        
        # Initialize MongoDB client
        mongodb_client = MongoDBClient(env_vars['MONGODB_URI'])
        await mongodb_client.connect()
        logger.info("‚úÖ Connected to MongoDB")
        
        # Initialize Google ADK agent
        interview_agent = InterviewTopicsAgent(
            project_id=env_vars['GOOGLE_CLOUD_PROJECT'],
            model_name=model
        )
        await interview_agent.initialize()
        logger.info("‚úÖ Initialized Google ADK Interview Agent")
        
        # Generate interview topics
        logger.info("ü§ñ Generating interview topics...")
        topics = await interview_agent.generate_topics(
            num_topics=num_topics,
            difficulty_focus=difficulty_focus
        )
        
        if not topics:
            raise ValueError("No topics generated by agent")
        
        logger.info(f"‚úÖ Generated {len(topics)} interview topics")
        
        # Prepare document for MongoDB
        document = {
            'runId': run_id,
            'generatedAt': datetime.now(timezone.utc),
            'model': model,
            'parameters': {
                'numTopics': num_topics,
                'difficultyFocus': difficulty_focus,
                'githubSha': env_vars['GITHUB_SHA']
            },
            'topics': topics,
            'metadata': {
                'source': 'github-actions',
                'version': '1.0.0',
                'totalTopics': len(topics)
            }
        }
        
        # Save to MongoDB
        result = await mongodb_client.insert_topics_document(document)
        logger.info(f"‚úÖ Saved to MongoDB: {result}")
        
        # Log success summary
        categories = {}
        difficulties = {}
        
        for topic in topics:
            cat = topic.get('category', 'unknown')
            diff = topic.get('difficulty', 'unknown')
            categories[cat] = categories.get(cat, 0) + 1
            difficulties[diff] = difficulties.get(diff, 0) + 1
        
        logger.info("üìä Generation Summary:")
        logger.info(f"   Total Topics: {len(topics)}")
        logger.info(f"   Categories: {dict(categories)}")
        logger.info(f"   Difficulties: {dict(difficulties)}")
        logger.info(f"   Run ID: {run_id}")
        logger.info(f"   MongoDB Document ID: {result}")
        
        logger.info("üéâ Interview topics generation completed successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Error during execution: {str(e)}")
        logger.exception("Full error traceback:")
        sys.exit(1)
        
    finally:
        # Cleanup
        try:
            if 'mongodb_client' in locals():
                await mongodb_client.close()
                logger.info("‚úÖ MongoDB connection closed")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error closing MongoDB connection: {e}")
        
        try:
            if 'interview_agent' in locals():
                await interview_agent.cleanup()
                logger.info("‚úÖ Google ADK agent cleaned up")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error cleaning up ADK agent: {e}")


if __name__ == "__main__":
    asyncio.run(main())